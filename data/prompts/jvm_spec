# Jarvis Virtual Machine (JVM) Instructions Specification
The Jarvis Virtual Machine (JVM) is an environment designed to interpret and execute a set of YAML-based instructions called "JVM Instructions". The JVM Instructions are intended to enable the execution of complex tasks involving data processing, AI model interaction, and information search.

## JVM Instruction Synopsis
JVM classifies instructions into:
**Basic Instructions** like 'WebSearch', 'FetchWebContent' or 'TextCompletion' perform defined tasks.
**Advanced Instructions** like 'RunPython' use AI for complex tasks but are resource-heavy.
**Flow Control Instructions** like 'Loop' or 'If' manage task execution flow in JVM.

JVM instructions are described in the following YAML format:
```yaml
instructions:
  - seq: # each instruction is given a unique, incrementing identifier called 'seq'. This sequence number helps to keep track of the order of the instructions.
    type: # specifies the type of instruction, such as 'WebSearch', 'TextCompletion', 'RunPython' ...
    inside_loop: # simply indicates whether the instruction is inside a loop.
    objective: # the string contains an objective description for this instruction only.
    rule_num: # the the rule (num) that was ultimately applied to select this instruction.
    args: # key-value pairs describing specific arguments for this instruction.
```

### Flow Control Instructions
**If**: This instruction serves as a conditional control mechanism in the JVM. It evaluates a given condition and based on its truth value, it executes a corresponding set of instructions.
```yaml
seq:
type: If
inside_loop:
objective:
rule_num:
args:
  condition: # The condition to be evaluated.
  then: # The instructions to be executed if the condition evaluates to true.
  else: # The instructions to be executed if the condition evaluates to false.
```

**Loop**: This instruction enables the repetition of a set of instructions for a predetermined number of iterations.
```yaml
seq:
type: Loop
inside_loop:
objective:
rule_num:
args:
  count: # Specifies the number of iterations for the loop. This can be dynamically evaluated using the evaluation syntax. For instance, "jvm.eval(len(jvm.get('fetched_urls.seq3.list')))"
  instructions: # Defines the list of instructions that are to be executed in each iteration.
```

## Manipulate Data in JVM Context
The JVM interpreter implements a context mechanism built on an underlying database to facilitate data sharing and transfer between JVM instructions. During execution, JVM instructions can save to and access data from the context using a specific 'key'. This 'key' must be formatted as '(key_name).seq(X).(type)', where 'X' is the unique sequence number of the JVM instruction that created this key, and 'type' denotes the type of the value, which must be a Python data type (either 'int', 'float', 'str', 'bool', or 'list').

For example:
- 'searchResult.seq5.list' - This key refers to a list named 'searchResult' that was created by the instruction with the sequence number 5.
- 'weatherData.seq4.float' - This key refers to a floating-point number named 'weatherData' that was created by the instruction with the sequence number 4.

The JVM provides the following methods to interact with and manipulate data in the JVM context database. This key-value API forms the primary means of data transfer between JVM instructions:
- **jvm.get('key_name')**: Retrieves and returns the value associated with the specified key.
- **jvm.set('key_name', value)**: Sets the specified key with a given value. Only used in generated code from 'RunPython', e.g. `jvm.set('temperature.seq3.int', 67)`
- **jvm.list_values_with_key_prefix('key_name_prefix')**: Efficiently fetches a list of values with keys that share the provided prefix. This method is often used in conjunction with the Loop instruction.

However, the `jvm.get()` method cannot be invoked directly within the input arguments of an instruction. Instead, values must be passed using the evaluation syntax via the `jvm.eval()` function.

For example:
- count: "jvm.eval(len(jvm.get('fetched_urls.seq3.list')))"
- content: "jvm.eval('\n'.join(jvm.list_values_with_key_prefix('article_content_')))"
- url: "jvm.eval('http://www.my-website.com/' + jvm.get('page_path.seq2.str'))"
- condition: "jvm.eval(jvm.get('new_york_temperature.seq1.float') > 25)"

### Using Index Key in a Loop
In JVM loops, a specific index key denotes the iteration's current index. The loop instruction self-manages this key: it initializes it at each loop's start and auto-increments it with every iteration, so users don't manually update it. Essentially, the index key is an in-built variable auto-updated every iteration to mirror the loop's current index.

Assuming the name of index key is 'idx', some examples:
- url: "jvm.eval(jvm.get('search_results.seq1.list')[jvm.get('idx')])"  # Retrieves the search result corresponding to the current index of the loop.
- save_to: "jvm.eval('relevant_info_' + str(jvm.get('idx')) + '.seq3.str')"  # Constructs a dynamic key for saving values within the loop.
- content: "jvm.eval(jvm.list_values_with_key_prefix('relevant_info_')[jvm.get('idx')])"  # Retrieves a value that corresponds to the current loop index from the values whose keys start with 'relevant_info_'."

## JVM Instruction References
### Basic Instructions
**WebSearch**: This instruction retrieves a list of URLs from a web search engine based on the provided query.
```yaml
args:
  query: # The search query keywords.
  save_to: # e.g. 'search_result.seq5.list'. The key (with the 'type' always being 'list') under which the search result URLs will be saved in the JVM context.
```

**FetchWebContent**: This instruction fetches and extracts the plain text content from a specified URL. It is specifically designed for handling web pages, with HTML parsing built-in.
```yaml
args:
  url: # The URL of the web page from which content should be fetched. Note: Only web page URLs are supported; local file paths or non-web URLs are not accepted.
  save_to: # e.g. 'fetched_content.seq3.str' The key (with the 'type' always being 'str') under which the fetched content will be saved in the JVM context.
```

**TextCompletion**: This instruction utilizes AI language models to perform text-based operations, including but not limited to content generation, text completion, code translation, content consolidation, summarizing, and information extraction. It is designed for interactive and user-friendly text manipulation tasks.
```yaml
args:
  operation: # A description that outlines the TextCompletion operation. This includes the objective of the task (i.e., what needs to be accomplished with the input data).
  output_format: # The output_format must be specified by using a YAML template that defines what data to save and the associated key to use.
    kvs:
      - key: # Specifies a context key
        value: <to_fill>  # A placeholder for the value to be filled by the TextCompletion operation
      - ...
  content: # The raw content to be processed. This is the direct input for the TextCompletion to work on.
```

### Advanced Instructions
**RunPython**: This instruction executes Python code, enabling operations such as I/O processing, API calling, and more.
```yaml
args:
  code: |
    # A multiline string containing the Python code to be executed.
    # Inside this code, JVM functions can be invoked directly without needing to use the jvm.eval() syntax for data access and manipulation. The 'jvm' module is imported by default. For instance, you can use "jvm.set('temperature.seq3.int', 67)" or "jvm.get('fected_content.seq5.list')".
  code_review: |
    # An assessment of the code's compliance with task objectives and coding standards. This review should be performed by the user creating the instruction or a designated code reviewer.
  pkg_dependencies: # A list of any Python packages that the code depends on.
```


## An Output Example
A complete JVM Instructions description should contain these fields:
```yaml
task:
objective:
thoughts:
hints_from_user:
start_seq:
instructions:
  - seq:
    type:
    inside_loop:
    objective:
    rule_num:
    args:
      ...
end_seq:
overall_outcome:
```

When forming the 'overall_outcome', Explain the overall outcome we had after succeeded, what is the final result and how to retrieve the results (specify a correct key name or (both key prefix and postfix if the key can't be retrieved by `jvm.get`)), As there are other tasks will use the result, give hints to next task.