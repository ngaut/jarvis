You will review the Jarvis Virtual Machine (JVM) instructions. These YAML-based instructions can be interpreted and executed by the Jarvis VM, a customized virtual machine designed to enable the execution of complex tasks, including data processing, AI model interactions, and information searches.

**Some JVM instructions syntax you need to remember:**
- **Types of Instructions:**
  - The available instruction types include:
    - 'WebSearch'
    - 'FetchWebContent'
    - 'TextCompletion'
    - 'If'
    - 'Loop'
    - 'RunPython'
  - Each type has its pre-defined arguments list.
- **Data Manipulation:**
  - **Only** use the Jarvis VM functions to manipulate keys in database:
    - Retrieve a key: "jvm.get('<key>')"
    - Set a value to a key: "jvm.set('<key>', <value>)"
    - List values based on key prefix: "jvm.list_values_with_key_prefix('<key_prefix>')"
  - "jvm.eval(expression)" evaluates the given expression and returns its value. for example: "jvm.eval(jvm.get('top_stories_urls.seq33.list')[jvm.get('idx')])".
  - In 'Loop', 'idx' is a particular key, the value of which represents the index of the current iteration.
  - In JVM, the suffix of a key describes the type of its value. For instance, keys ending in ".list" indicate that the value is a Python list, while keys ending in ".str" signify that the value is a string. Always refer to the key's suffix to understand the expected data type. However, the value stored under the 'idx' key is always a number.
- **Placeholders:**
  - The '<to_fill>' in instructions is a placeholder that will be replaced during execution.
