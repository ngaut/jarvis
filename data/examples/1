### An Example Output
```yaml
task: "Get current weather data for San Francisco and provide suggestions based on temperature, save the results to file"

objective: ...

thoughts:  # AI-generated thoughts content, should be plain text without newlines, wrapped in quotes

hints_from_user:  # A list of hints from the user, each item must be plain text and wrapped in quotes

start_seq: 1  # user-specified start_seq

instructions:
  - seq: 1
    type: WebSearch
    inside_loop: false
    objective: "Find URLs related to current weather in San Francisco"
    rule_num: 2
    args:
      query: "temperature in San Francisco"
      save_to: "search_result_urls.seq1.list"

  - seq: 2
    type: FetchWebContent
    inside_loop: false
    rule_num: 2
    objective: "Fetch the content from the first URL from the search results"
    args:
      url: "jvm.eval(jvm.get('search_result_urls.seq1.list')[0])"  # make sure the reference key exists.
      save_to: "fetched_content.seq2.str" # without <idx> as not inside a loop

  - seq: 3
    type: TextCompletion
    inside_loop: false
    objective: "Get the current temperature in San Francisco from the fetched content"
    rule_num: 3
    args:
      request: "Get the current temperature and url in San Francisco"
      output_format:
        kvs:
          - key: "temperature.seq3.int"  # without <idx> as not inside a loop
            value: "<to_fill>"
          - key: "source_url.seq3.str"
            value: "<to_fill>"
      content: "jvm.eval(jvm.get('fetched_content.seq2.str'))"

  - seq: 4
    type: If
    inside_loop: false
    objective: Evaluate condition to decide if we recommend outdoor or indoor activities
    rule_num: 5
    args:
      condition: "20 < jvm.eval(jvm.get('temperature.seq3.int')) < 30"
    then:
      - seq: 5
        type: TextCompletion
        inside_loop: false
        objective: "Generate outdoor activities suggestions"
        rule_num: 3
        args:
          request: "What outdoor activities should we recommend to the users? Please generate a weather notes"
          output_format:
            kvs:
              - key: "weather_notes.seq5.str"
                value: "<to_fill>"
          content: "Today's temperature in San Francisco is jvm.eval(jvm.get('temperature.seq3.int'))"
    else:
      - seq: 6
        type: TextCompletion
        inside_loop: false
        objective: "Generate indoor activities suggestions"
        rule_num: 3
        args:
          request: "What indoor activities should we recommend to the users? Please generate a weather notes"
          output_format:
            kvs:
              - key: "weather_notes.seq6.str"
                value: "<to_fill>"
          content: "Today's temperature in San Francisco is jvm.eval(jvm.get('temperature.seq3.int'))"

  - seq: 7
    type: TextCompletion
    inside_loop: false
    objective: "Generate a complete weather report for San Francisco using the gathered information"
    rule_num: 3
    args:
      request: "Please generate current weather report for San Francisco"
      output_format:
        kvs:
          - key: "weather_report.seq7.str"
            value: "<to_fill>"
      content: "temperature: jvm.eval(jvm.get('temperature.seq3.int')), source_url: jvm.eval(jvm.get('source_url.seq3.str')), weather_notes: jvm.eval(jvm.get('weather_notes.seq5.str') or jvm.get('weather_notes.seq6.str'))"

  - seq: 8
    type: RunPython
    inside_loop: false
    objective: "Save report to a file"
    rule_num: 5 # RunPython is the only instruction that can do file IO
    args:
      code: |
        with open('weather_report.txt', 'w') as f:
          f.write(jvm.get('weather_report.seq7.str'))
      code_review: "the code writes the weather report to a file named weather_report.txt"  # reviews the python code
      pkg_dependencies: []

end_seq: 8

overall_outcome: "The current weather report for San Francisco stored, it can be retrieved by jvm.eval(jvm.get('WeatherReport.seq7.str')) or file weather_report.txt, the report includes the source url of weather data, notes on suggestions from AI"
```
